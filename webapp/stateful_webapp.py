#---PIP PACKAGES---#
import streamlit as st
from streamlit_option_menu import option_menu
from isoweek import Week

from whykay.investments.fetch_markets_data import get_holdings_metadata
from whykay.investments.stocks_analyzer import calculate_exposure
import json
#---BUILT-IN PYTHON MODULES
from datetime import datetime, date
import calendar
from pprint import pprint
import uuid
from streamlit_echarts import st_echarts


#---IMPORT PYTHON FILE IN SAME DIR---#
import db as db

import pandas as pd

#---SETTINGS---#
page_title = "Stock/ETF exposure calculator"
page_icon = "$"
layout = "wide"


#---PAGE CONFIG---#
st.set_page_config(page_title=page_title, page_icon=page_icon, layout=layout)
st.title(f"{page_title} {page_icon}")
st.markdown("##### Powered by `WhyKay` library v0.4.0")
st.markdown("""---""")

#---STREAMLIT CONFIG HIDE---#
hide_st_style = """<style>
                #MainMenu {visibility : hidden;}
                footer {visibility : hidden;}
                header {visibility : hidden;}
                </style>
                """
st.markdown(hide_st_style, unsafe_allow_html=True)


input_area, portfolio_area, industry_analysis = st.columns([5,5,5], gap = "medium")

st.session_state["list_of_investments"] = []
with input_area:
    st.subheader("Add to portfolio")
    st.markdown("###### Enter your `Stock/ETF` information")
    with st.form("entry_form", clear_on_submit=True):
        ticker_input, securities_category_input = st.columns([3,4])
        ticker_input.text_input("Ticker symbol:", key="ticker")
        securities_category_input.radio(
                "Is this an ETF?",
                key="etf_check",
                options=["No", "Yes"]
            )
        st.caption("Following ETF providers are supported for now")
        etf_provider = st.selectbox(
                "Which ETF provider does this belong?",
                ("iShares", "Vanguard", "HSBC", "JP Morgan", "Morningstar")
            )
        st.number_input("Investment amount: ", key = "investment")

        
        submitted = st.form_submit_button("Add to portfolio", type = "primary")
        
if submitted:
    metadata = get_holdings_metadata(st.session_state["ticker"])
    if metadata is not None:
        ticker = st.session_state["ticker"]
        etf_check = st.session_state["etf_check"]
        investment = st.session_state["investment"]

        st.session_state.list_of_investments.append(
            {
                "ticker": ticker,
                "etf_check": etf_check,
                "investment": investment
            }
        )
        # db.add_to_portfolio(ticker.upper(), investment, etf_check, etf_provider)
    else:
        st.warning('Unsupported Stock/ETF in the current v0.4.0 release')

with portfolio_area:
    "st.session_state object: ", st.session_state
# with portfolio_area:
#     st.subheader("Overall portfolio")
    
#     st.markdown("###### Click on an investment to see detailed information; and whether to persist it for final analysis or remove")

#     if len(db.get_portfolio()[0]) > 0:
#         for holdings in db.get_portfolio()[0]:
#             metadata = get_holdings_metadata(holdings["ticker"])
#             if metadata is not None:
#                 with st.expander(holdings["ticker"]):
#                     st.write(f'Autogenerated ID: {holdings["key"]}')
#                     st.write(f'Ticker symbol: {holdings["ticker"]}')
#                     st.write(f'Investment: {holdings["investment"]}')
                    
#                     st.button(label = "Remove investment",key = f'{holdings["key"]}t', on_click=db.delete_from_portfolio, args=(holdings["key"],))
#             else:
#                 with st.expander(f'⚠️ Unsupported: {holdings["ticker"]}'):
#                     st.write(f'Autogenerated ID: {holdings["key"]}')
#                     st.write(f'Ticker symbol: {holdings["ticker"]}')
#                     st.write(f'Investment: {holdings["investment"]}')
                    
#                     st.button(label = "Remove investment",key = f'{holdings["key"]}t', on_click=db.delete_from_portfolio, args=(holdings["key"],))

        
#         button_analysis = st.button(label = "Run Analysis", use_container_width = True, key = "run_analysis_button")
  
# if 'run_analysis_button' in st.session_state and st.session_state.run_analysis_button is True:
#     with industry_analysis:
#         st.subheader("Industry exposure")
#         st.markdown("###### Tells you the orientation of your portfolio towards different industries")

#         option = {
#             "title": {"text": "Industries"},
#             "legend": {"data": ["（Allocated Budget）", "（Actual Spending）"]},
#             "radar": {
#                 "indicator": [
#                     {"name": "销售（Sales）", "max": 6500},
#                     {"name": "管理（Administration）", "max": 16000},
#                     {"name": "信息技术（Information Technology）", "max": 30000},
#                     {"name": "客服（Customer Support）", "max": 38000},
#                     {"name": "研发（Development）", "max": 52000}
#                 ]
#             },
#             "series": [
#                 {
#                     "name": "预算 vs 开销（Budget vs spending）",
#                     "type": "radar",
#                     "data": [
#                         {
#                             "value": [4200, 3000, 20000, 35000, 50000, 18000],
#                             "name": "（Allocated Budget）",
#                         }
#                     ],
#                 }
#             ],
#         }
#         st_echarts(option, height="500px")

#     st.markdown("""---""")
#     st.subheader("Equity Stock exposure")
#     st.markdown("###### Tells you the orientation of your portfolio towards individual equity stocks")

#     options = {
#         "xAxis": {
#             "type": "category",
#             "data": ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
#         },
#         "yAxis": {"type": "value"},
#         "series": [{"data": [120, 200, 150, 80, 70, 110, 130], "type": "bar"}],
#     }
#     st_echarts(options=options, height="500px")